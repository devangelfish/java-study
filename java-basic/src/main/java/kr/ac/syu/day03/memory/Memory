
	Java Source		: 사용자가 작성한 Java 코드 (프로젝트 상 src)
	Java Complier	: Java 코드를 바이트 코드로 변환 (프로젝트 상 bin)
	
	Class Loader
		- JVM 내에 Class를 읽어들이는 역할
		- 클래스들을 적절히 배치하는 작업 수행 (연결, linking)
		- 실행(Runtime) 시 동적으로 읽어들여 연결(배치)
		
	Runtime Data Area
		- JVM이 OS에게 할당받은 메모리 영역 (OS에 의해 실행되면서!)
		- Method Area, Heap Area, JVM Stack Area, PC Registers,
		  Native Method Stack Area, Constant Pool
		  
		Method Area
			- 클래스 정보, 메소드와 필드 정보, static 메소드와 필드 정보,
			    바이트 코드 등을 보관
			- 모든 쓰레드에서 공유 (자원 공유의 문제점 주의!)
			- JVM 시작 시 생성되며, 프로그램 종료 시 해제
			
		Heap Area
			- 동적으로 할당하여 사용하는 메모리 영역
			- new 연산자로 생성된 인스턴스 및 배열을 저장
			- 자동 초기화
			- GC의 대상
			
		Stack Area
			- 메소드 호출 시 해당 데이터 영역이 생성
			- 지역 변수, 매개 변수, 임시 변수, 레퍼런스 변수(참조 변수)
			- 연산 중 발생하는 임시 데이터 저장
			- { } (메소드, 영역)가 끝날 때 해제
			- 자동 초기화 되지 않음
			
		PC Registers
			- 현재 수행 중인 JVM의 명령 주소 저장
			- CPU에서 명령 수행 시 CPU는 수행하는 동안,
			   필요한 정보를 CPU내의 기억장치(Resister)에 저장
			- 연산 결과 값을 전달하기 전에 저장하는 CPU내의 기억장치
			
		Native Method Stack Area
			- Java외의 언어로 작성된 Native 코드를 수행하기 위한 영역
			- JNI(Java Native Interface)을 통해 호출되는
			  C/C++ 등의 코드를 수행하기 위한 영역
			  
		Constant Pool (상수 풀)
			- Class, Interface의 상수 필드, 필드, 메소드 등에 대한 참조 (레퍼런스)
			- 실제 메모리상 주소를 찾을 때 참조하는 영역
			
Execution Engine
	- Class Loader를 통해 JVM내의 바이트 코드 실행
	- 명령어 단위로 실행
		
		
		
		
		
		
		
		
		
		
		
		
		